plugins {
    id 'org.springframework.boot' version '3.4.3'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'com.github.ben-manes.versions' version '0.52.0'
}

apply plugin: 'io.spring.dependency-management'

ext['log4j2.version'] = '2.17.0'
ext['logback.version'] = '1.2.9'

group = 'jp.co.who'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '18'
targetCompatibility = '18'
//sourceCompatibility = '16'
//targetCompatibility = '16'

configurations {
    developmentOnly
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // metrics
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // db
    runtimeOnly 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2:2.3.+'

    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.780'

    // auto reload for dev.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // validator
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.validator:hibernate-validator'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'com.squareup.okhttp3:mockwebserver'

    // powermock
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'

    // mockito-inline(static mock)
    testImplementation 'org.junit.platform:junit-platform-launcher:1.12.0'
    testImplementation 'org.mockito:mockito-core:5.15.2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    implementation 'mysql:mysql-connector-java:8.0.33'

    implementation 'com.google.guava:guava:33.4.0-jre'
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core'
}

test {
    // Junit5 を使う設定
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

spotless {
    java {
        googleJavaFormat('1.11.0')
    }
}

jacoco {
    toolVersion = '0.8.12'
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
